# -*- coding: utf-8 -*-
# refer: https://github.com/MSIsunny/GenshinWishCalculator-py/blob/main/WishSupport.py

import sys
import argparse
import os
import json
import numpy as np

import argparse
ap = argparse.ArgumentParser()
ap.add_argument('-d', '--dir', nargs='?', default='./', type=str,
                help='参数(简写), 参数(全称), 参数个数 0 或 1, 默认值, 类型, 帮助内容')
ap.add_argument('-v', '--verbose', action='store_true',
                help='参数(简写), 参数(全称), 行为(添加则转变为 ture), 帮助')
ap.add_argument('foobar', help='必要的参数')
args = vars(ap.parse_args())


# 可以修改的
纠缠之缘数量 = 0

希望抽到几次限定角色 = 0
角色池已垫数量 = 0
角色池是否大保底 = 0

希望抽到几次限定武器 = 0
武器池已垫数量 = 0
武器池是否大保底 = 0
武器池定轨命定值 = 0

# 一般无需修改的
角色池最大抽卡必出金所需纠缠之缘数 = 90
角色池吃满大保底需要出金的次数 = 2
角色池最大抽卡必出限定金所需纠缠之缘数 = 角色池吃满大保底需要出金的次数 * 角色池最大抽卡必出金所需纠缠之缘数

武器池最大抽卡必出金所需纠缠之缘数 = 80
武器池吃满定轨需要出金的次数 = 3    # 第一次歪, 第二次出另一把, 第三次是定轨
武器池最大抽卡必出定轨的武器金所需纠缠之缘数 = 武器池最大抽卡必出金所需纠缠之缘数 * 武器池吃满定轨需要出金的次数

# ================================ util ================================


def color(text: str = '', color: int = 2) -> str:
    '''
    返回对应的控制台 ANSI 颜色; 
    ```python
    color_table = {
        0: '无色', 
        1: '黑色加粗',
        2: '红色加粗',
        3: '绿色加粗',
        4: '黄色加粗',
        5: '蓝色加粗',
        6: '紫色加粗',
        7: '青色加粗',
        8: '白色加粗',
    }
    ```
    '''
    color_table = {
        0: '{}',
        1: '\033[1;30m{}\033[0m',
        2: '\033[1;31m{}\033[0m',
        3: '\033[1;32m{}\033[0m',
        4: '\033[1;33m{}\033[0m',
        5: '\033[1;34m{}\033[0m',
        6: '\033[1;35m{}\033[0m',
        7: '\033[1;36m{}\033[0m',
        8: '\033[1;37m{}\033[0m',
    }
    return color_table[color].format(text)


# ================================ main ================================
class 祈愿计算器():
    def __init__(self,
                 纠缠之缘数量: int,
                 希望抽到几个限定角色: int,
                 角色池已垫数量: int,
                 角色池是否大保底: bool,
                 希望抽到几次限定武器: int,
                 武器池已垫数量: int,
                 武器池是否大保底: bool,
                 武器池定轨命定值: int
                 ):

        self.纠缠之缘数量 = 纠缠之缘数量
        self.希望抽到几个限定角色 = 希望抽到几个限定角色
        self.角色池已垫数量 = 角色池已垫数量
        self.角色池是否大保底 = 角色池是否大保底
        self.希望抽到几次限定武器 = 希望抽到几次限定武器
        self.武器池已垫数量 = 武器池已垫数量
        self.武器池是否大保底 = 武器池是否大保底
        self.武器池定轨命定值 = 武器池定轨命定值

        assert self.纠缠之缘数量 < 0 and self.纠缠之缘数量 > 1500, '目前持有的纠缠之缘数量应大于等于 0, 原石自行换算'
        assert self.希望抽到几个限定角色 < 0 and self.希望抽到几个限定角色 > 7, '目标获得的限定角色卡数量应处于 0 ~ 7 之间'
        assert self.角色池已垫数量 < 0 and self.角色池已垫数量 > 89, '已垫限定角色卡池抽数应处于 0 ~ 89 之间'
        assert self.角色池是否大保底 not in [
            0, 1], '限定角色卡池是否为大保底的状态只有 0 或 1'
        assert self.希望抽到几次限定武器 < 0 and self.希望抽到几次限定武器 > 5, '目标获得的限定且目标定轨武器数量应处于 0 ~ 5 之间'
        assert self.武器池已垫数量 < 0 and self.武器池已垫数量 > 79, '已垫限定且目标定轨武器卡池抽数应处于 0 ~ 79 之间'
        assert self.武器池是否大保底 not in [
            0, 1], '限定且定轨的武器卡池是否为保底的状态只有 0 或 1'
        assert self.武器池定轨命定值 not in [0, 1], '武器卡池的定轨状态只有 0, 1'
        
        # 多加 1 行用于表示达成抽卡预期的状态
        self.矩阵大小 = 角色池最大抽卡必出限定金所需纠缠之缘数 + 武器池最大抽卡必出定轨的武器金所需纠缠之缘数 + 1
        self.矩阵 = np.zeros((self.矩阵大小, self.矩阵大小))
        
        # 设定矩阵中, 角色池的初始状态
        矩阵角色池偏移量 = 0
        if self.希望抽到几个限定角色 != 0:
            if self.角色池是否大保底 == False:
                矩阵角色池偏移量 = 角色池已垫数量
            elif self.角色池是否大保底 == True:
                矩阵角色池偏移量 = 角色池已垫数量 + 角色池最大抽卡必出金所需纠缠之缘数

        # 生成转移概率矩阵（矩阵前面的行是武器，后面的行是角色，最后一行表示的状态是已经达成抽卡预期）
        

        def character_pool_probability(self) -> float:
            '''
            限定角色卡池单次出金的概率
            '''
            纠缠之缘数量: int = self.纠缠之缘数量

            if 纠缠之缘数量 <= 73:
                return 0.006
            elif 纠缠之缘数量 <= 89:
                return (0.006 + 0.06 * (纠缠之缘数量 - 73))
            else:
                return 1

        def weapon_pool_probability(self) -> float:
            '''
            限定武器卡池单次出金的概览
            '''
            纠缠之缘数量: int = self.纠缠之缘数量
            
            if 纠缠之缘数量 <= 62:
                return 0.007
            elif 纠缠之缘数量 <= 73:
                return (0.007 + 0.07 * (纠缠之缘数量 - 62))
            elif 纠缠之缘数量 <= 79:
                return (0.777 + 0.035 * (纠缠之缘数量 - 73))
            else:
                return 1